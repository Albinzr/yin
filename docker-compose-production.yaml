version: "3.7"
services:

# reader server to read all incoming beacon
  yin:
    image: gcr.io/applytics/yin-image:latest
    container_name: yin-container 
    ports:
      - "1000:1000"
    # volumes: 
    #   # - file-storage:/root/store
    #   # - file-storage:/root/just.txt
    expose:
    - "1000"
    restart: always
    networks:
      - yinyang-network

# zookeeper 
  zookeeper:
    image: wurstmeister/zookeeper:3.4.6
    expose:
      - "2181"
    restart: always
    networks:
      - yinyang-network
    container_name: zookeeper-container

# kafka
  kafka:
    image: wurstmeister/kafka:2.12-2.3.0
    depends_on:
      - zookeeper
    ports:
      - "9093:9093"
    expose:
      - "9092"
    environment:
      KAFKA_CREATE_TOPICS: "sarama_topic:2:1"
      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:9092,OUTSIDE://localhost:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_LISTENERS: INSIDE://0.0.0.0:9092,OUTSIDE://0.0.0.0:9093
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
      KAFKA_LOG_DIRS: "/kafka/kafka-logs"
      
      KAFKA_REPLICA_FETCH_MAX_BYTES: 99999999
      KAFKA_PRODUCER_MAX_REQUEST_SIZE: 99999999
      KAFKA_CONSUMER_MAX_PARTITION_FETCH_BYTES: 99999999
      CONNECT_PRODUCER_MAX_REQUEST_SIZE: 99999999
      CONNECT_CONSUMER_MAX_PARTITION_FETCH_BYTES: 99999999

    volumes:
      - kafka-storage:/var/run/docker.sock
      - kafka-storage:/var/lib/kafka
    networks:
      - yinyang-network
    restart: always
    container_name: kafka-container

# global network for entire system
networks:
  yinyang-network:
    driver: bridge
    name: yinyang-network

# storage for yin server 
volumes:
  # file-storage:
  #   name: file-storage
  kafka-storage:
     name: kafka-storage